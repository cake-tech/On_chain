import 'package:on_chain/ethereum/src/models/log_entry.dart';
import 'package:on_chain/utils/utils/number_utils.dart';

/// Represents the receipt of an Ethereum transaction.
class TransactionReceipt {
  /// The hash of the block where the transaction was included.
  final String? blockHash;

  /// The block number where the transaction was included.
  final int? blockNumber;

  /// The address of the contract created, if applicable.
  final String? contractAddress;

  /// The total gas used in the block, including gas used by other transactions.
  final int? cumulativeGasUsed;

  /// The effective gas price of the transaction.
  final int? effectiveGasPrice;

  /// The sender's address.
  final String from;

  /// The gas used by this specific transaction.
  final int? gasUsed;

  /// A bloom filter for the logs of the transaction.
  final String logsBloom;

  /// The status of the transaction.
  final bool? status;

  /// The recipient's address, if it's a contract creation.
  final String? to;

  /// The hash of the transaction.
  final String transactionHash;

  /// The index of the transaction within the block.
  final int? transactionIndex;

  /// The transaction type.
  final int type;

  /// The list of log entries generated by the transaction.
  final List<LogEntry> logs;

  /// Creates a new instance of the [TransactionReceipt] class.
  const TransactionReceipt({
    required this.blockHash,
    required this.blockNumber,
    this.contractAddress,
    required this.cumulativeGasUsed,
    required this.effectiveGasPrice,
    required this.from,
    required this.gasUsed,
    required this.logsBloom,
    required this.status,
    required this.to,
    required this.transactionHash,
    required this.transactionIndex,
    required this.type,
    required this.logs,
  });

  /// Creates a [TransactionReceipt] instance from a JSON map.
  factory TransactionReceipt.fromJson(Map<String, dynamic> json) {
    final List<LogEntry> logs =
        (json['logs'] as List?)?.map((e) => LogEntry.fromJson(e)).toList() ??
            <LogEntry>[];
    return TransactionReceipt(
      logs: logs,
      blockHash: json['blockHash'],
      blockNumber: PluginIntUtils.tryHexToInt(json['blockNumber']),
      contractAddress: json['contractAddress'],
      cumulativeGasUsed: PluginIntUtils.tryHexToInt(json['cumulativeGasUsed']),
      effectiveGasPrice: PluginIntUtils.tryHexToInt(json['effectiveGasPrice']),
      from: json['from'],
      gasUsed: PluginIntUtils.tryHexToInt(json['gasUsed']),
      logsBloom: json['logsBloom'],
      status: PluginBooleanUtils.tryHexToBool(json['status']),
      to: json['to'],
      transactionHash: json['transactionHash'],
      transactionIndex: PluginIntUtils.tryHexToInt(json['transactionIndex']),
      type: PluginIntUtils.hexToInt(json['type']),
    );
  }

  /// Returns a string representation of the [TransactionReceipt] object.
  @override
  String toString() {
    return '''
      TransactionReceipt {
        blockHash: $blockHash,
        blockNumber: $blockNumber,
        contractAddress: $contractAddress,
        cumulativeGasUsed: $cumulativeGasUsed,
        effectiveGasPrice: $effectiveGasPrice,
        from: $from,
        gasUsed: $gasUsed,
        logsBloom: $logsBloom,
        status: $status,
        to: $to,
        transactionHash: $transactionHash,
        transactionIndex: $transactionIndex,
        type: $type,
        logs: $logs,
      }
    ''';
  }
}
